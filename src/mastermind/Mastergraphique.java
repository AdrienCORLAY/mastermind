/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mastermind;


import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.Random;

import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author adrie
 */
public class Mastergraphique extends javax.swing.JFrame {
/* Dans cette partie nous initialisons les variables qui devront etre accessible dans l'ensemble du code*/
    int valeurcouleur = 0; // valeurcouleur nous permet d'aller chercher une chaine de caractères dans un tableau
    int nombredecoups = 12; // nous définissons un nombre de coups de base qui correspond aux 12 essais du master classique
    // Le but de pouvoir changer cette variable afin de d'augmenter ou diminuer le nombre d'essais 
    int nombredecouleur = 8; // nous définissons un nombre de couleurs de base qui correspond aux 8 couleurs du master classique
    // Le but de pouvoir changer cette variable afin de d'augmenter ou diminuer le nombre de couleurs 
    CouleurMastergraph couleurmaster = new CouleurMastergraph(0); //Nous definissons ici couleurmaster qui nous permettra 
    //d'accéder à la classe CouleurMastergraph
    String[] tabbase = new String[4]; // tabbase contient la combinaison que le joueur doit chercher sous forme de chaines de caractères
    GrilleMastergraph grillejeu; 
    int touractuel = 0; // on inititialise le tour de jeu à 0
    private Cellulegraphique[][] tableauBoutons; // nous créons un tableau de cellules
    BonnePlace [] tableauplace; // ce tableau répertori les résultats obtenue de chaque combinaisons proposees 
    // Il contient le nombre de pions à la bonne place dans la combinaison
    BonneCouleur [] tableaucouleur;// ce tableau répertori les résultats obtenue de chaque combinaisons proposees 
    // Il contient le nombre de pions à la bonne couleur dans la combinaison
    BonneCouleur bonc; // Cette classe nous permet de creer des label et de les inserer dans le panel prévu pour indiquer le nombre de bonne couleur
    BonnePlace bonp;// Cette classe nous permet de creer des label et de les inserer dans le panel prévu pour indiquer le nombre de pions a la bonne place
    JLabel labelgagnantplace; // Nous définissons labelgagnantplace comme étant un label ce qui permet de l'afficher dans notre fenetre de jeu
    JLabel labelgagnantcouleur;// Nous définissons labelgagnantcouleur comme étant un label ce qui permet de l'afficher dans notre fenetre de jeu
    ImageIcon img_regle = new javax.swing.ImageIcon(getClass().getResource("/images/Regle.png")); //nous importons l'image contenant les regle du jeu
    

    public Mastergraphique() {
/* Au depart plusieur panels ne sont pas affiché car le joueur n'en a pas besoin*/
        initComponents();
        nbbonneplace.setVisible(false);
        Solfinale.setVisible(false);
        GrilleJeugraph.setVisible(false);
        nbbonnecouleur.setVisible(false);
        Textecouleur.setVisible(false);
        buttonvalid.setVisible(false);
        couleurselec.setVisible(false);
        bienplace.setVisible(false);
        biencouleur.setVisible(false);
        boutonregle.setIcon(img_regle); // nous inserons l'image contenant les regles du jeu dans la zone prevu a cet effet
        nbessais.setText(nombredecoups + ""); //on initialise le texte contenue nbessais(une zone de texte), nous mettons des guillement afin de 
        // transformer nombredecoups en chaine de caractère.
        nbcoul.setText(nombredecouleur + "");//on initialise le texte contenue nbcoul(une zone de texte), nous mettons des guillement afin de 
        // transformer nombredecouleur en chaine de caractère.
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GrilleJeugraph = new javax.swing.JPanel();
        nbbonnecouleur = new javax.swing.JPanel();
        buttonstart = new javax.swing.JButton();
        plusess = new javax.swing.JButton();
        pluscoul = new javax.swing.JButton();
        moinsess = new javax.swing.JButton();
        moinscoul = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nbessais = new javax.swing.JLabel();
        nbcoul = new javax.swing.JLabel();
        nbbonneplace = new javax.swing.JPanel();
        Panelcouleur = new javax.swing.JPanel();
        buttonvalid = new javax.swing.JButton();
        Textecouleur = new javax.swing.JLabel();
        boutonregle = new javax.swing.JButton();
        couleurselec = new javax.swing.JLabel();
        biencouleur = new javax.swing.JLabel();
        bienplace = new javax.swing.JLabel();
        Solfinale = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1300, 700));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        GrilleJeugraph.setBackground(new java.awt.Color(0, 0, 0));
        GrilleJeugraph.setMinimumSize(new java.awt.Dimension(600, 200));
        GrilleJeugraph.setPreferredSize(new java.awt.Dimension(900, 200));
        GrilleJeugraph.setLayout(new java.awt.GridLayout(4, 12));
        getContentPane().add(GrilleJeugraph, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, -1, -1));

        nbbonnecouleur.setBackground(new java.awt.Color(255, 255, 255));
        nbbonnecouleur.setPreferredSize(new java.awt.Dimension(900, 60));
        nbbonnecouleur.setLayout(new java.awt.GridLayout());
        getContentPane().add(nbbonnecouleur, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 460, -1, 30));

        buttonstart.setText("START");
        buttonstart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonstartActionPerformed(evt);
            }
        });
        getContentPane().add(buttonstart, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, -1, -1));

        plusess.setText("+");
        plusess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusessActionPerformed(evt);
            }
        });
        getContentPane().add(plusess, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, -1, -1));

        pluscoul.setText("+");
        pluscoul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pluscoulActionPerformed(evt);
            }
        });
        getContentPane().add(pluscoul, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 70, -1, -1));

        moinsess.setText("-");
        moinsess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moinsessActionPerformed(evt);
            }
        });
        getContentPane().add(moinsess, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, -1, -1));

        moinscoul.setText("-");
        moinscoul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moinscoulActionPerformed(evt);
            }
        });
        getContentPane().add(moinscoul, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, -1, -1));

        jLabel1.setText("nombre essais");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, -1, -1));

        jLabel2.setText("nombre de couleurs");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 80, -1, -1));

        nbessais.setText("nombre");
        getContentPane().add(nbessais, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 30, -1, -1));

        nbcoul.setText("nb couleurs");
        getContentPane().add(nbcoul, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 80, -1, -1));

        nbbonneplace.setBackground(new java.awt.Color(204, 0, 0));
        nbbonneplace.setPreferredSize(new java.awt.Dimension(60, 60));
        nbbonneplace.setRequestFocusEnabled(false);
        nbbonneplace.setLayout(new java.awt.GridLayout());
        getContentPane().add(nbbonneplace, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, -1, 30));

        Panelcouleur.setPreferredSize(new java.awt.Dimension(900, 75));
        Panelcouleur.setLayout(new java.awt.GridLayout());
        getContentPane().add(Panelcouleur, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 600, -1, -1));

        buttonvalid.setText("Valider");
        buttonvalid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonvalidActionPerformed(evt);
            }
        });
        getContentPane().add(buttonvalid, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 550, -1, -1));

        Textecouleur.setText("aucune couleur sélectionnée");
        getContentPane().add(Textecouleur, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 550, 170, 30));
        getContentPane().add(boutonregle, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 0, -1, -1));

        couleurselec.setText("Couleur sélectionée:");
        getContentPane().add(couleurselec, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 550, -1, 30));

        biencouleur.setText("La couleur de ton pion est dans la combinaison finale");
        getContentPane().add(biencouleur, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 490, 330, -1));

        bienplace.setText("Ton pion est de la bonne couleur et il est bien placé");
        getContentPane().add(bienplace, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 210, -1, -1));

        Solfinale.setBackground(new java.awt.Color(0, 204, 51));

        javax.swing.GroupLayout SolfinaleLayout = new javax.swing.GroupLayout(Solfinale);
        Solfinale.setLayout(SolfinaleLayout);
        SolfinaleLayout.setHorizontalGroup(
            SolfinaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        SolfinaleLayout.setVerticalGroup(
            SolfinaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        getContentPane().add(Solfinale, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 260, -1, 200));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void initialiserPartie(int essais) {
        grillejeu = new GrilleMastergraph(essais);
        //Ici nous initialisons seleument une grille de jeu qui contiendra des cellules
        // Afin de crer une grille de la bonne taille nous donnons en parametre le nombre d'essais que le joueur aura au cours de la partie
    }
// Maintenant que nous initialisé la partie nous commencons la partie en appuyant sur le bouton start
    private void buttonstartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonstartActionPerformed

        Random rdc = new Random();// cette méthode nous permet de faire des tirages alétoire
        // nous affichons les panel qui étaient jusqu'a maintenat caches car le joueur va en avoir besoin
        nbbonneplace.setVisible(true);
        GrilleJeugraph.setVisible(true);
        nbbonnecouleur.setVisible(true);
        Textecouleur.setVisible(true);
        buttonvalid.setVisible(true);
        couleurselec.setVisible(true);
        bienplace.setVisible(true);
        biencouleur.setVisible(true);
        
        int nbcoups = Integer.parseInt(nbessais.getText());//Integer.parseInt permet de transformer une chaine de caractères en entier
        initialiserPartie(nbcoups);
        //Ainsi nous initialisons une grille de jeu avec le bon nombre de colonnes

        
        // Afin d'améliorer nore affichage nous dimensionnons la grille de jeu affichee en fonction du nombre d'essais du joueur
        nbbonnecouleur.setPreferredSize(new Dimension(nbcoups * 50, 30));
        GrilleJeugraph.setPreferredSize(new Dimension(nbcoups * 50, 200));
        nbbonneplace.setPreferredSize(new Dimension(nbcoups * 50, 30));

        // Nous créons de la meme maniere les tableaux contenant les résultats obtenus en fonction du nombre d'essais
        tableaucouleur = new BonneCouleur[nbcoups];
        tableauplace = new BonnePlace[nbcoups];
        
        for (int place = 0; place < nbcoups; place++){
            bonp = new BonnePlace(place);
            nbbonneplace.add(bonp);
            tableauplace[place] = bonp;
            bonc = new BonneCouleur(place);
            nbbonnecouleur.add(bonc);
            tableaucouleur[place] = bonc;
        }
        
        
        int nombrecoul = Integer.parseInt(nbcoul.getText());
        
      
       
        for (int i = 0; i <= 3; i++) {
            int nbcouleur;
            nbcouleur = rdc.nextInt(nombrecoul);
            tabbase[i] = couleurmaster.Tableaucouleur[nbcouleur];           
            CouleurMastergraph pionfinal = new CouleurMastergraph(nbcouleur);
            Solfinale.add(pionfinal);
            Solfinale.setPreferredSize(new Dimension(50, 200));
            Solfinale.setLayout(new GridLayout(4,1));
            Solfinale.repaint();
            
        }
        
        
        for (int v = 0; v < nombrecoul; v++) {
            Colors Carrecouleur = new Colors(couleurmaster.Tableaucouleur[v]);
            Carrecouleur.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    Textecouleur.setText(Carrecouleur.couleurAssociee);
                }
            });
            Panelcouleur.add(Carrecouleur);

        }
       
        
        Textecouleur.repaint();
        String couleuraffiche = null;
        //couleuraffiche = Textecouleur.getText();
        
        tableauBoutons = new Cellulegraphique[nbcoups][4];
        for (int ligne = 0; ligne < 4; ligne++) {
            for (int col = 0; col < nbcoups; col++) {
                Cellulegraphique cellGraph = new Cellulegraphique(ligne,col, couleuraffiche);
                tableauBoutons[col][ligne] = cellGraph;
                cellGraph.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        
                        if (touractuel == cellGraph.colonne){
                           cellGraph.couleurAssociee = Textecouleur.getText();
                        }
                     
                    }

                });

                GrilleJeugraph.add(cellGraph);
                GrilleJeugraph.repaint();

                if (col != touractuel) {
                    tableauBoutons[col][ligne].setEnabled(false);
                }

            }

        }

       
        buttonstart.setEnabled(false);
        moinsess.setEnabled(false);
        moinscoul.setEnabled(false);
        plusess.setEnabled(false);
        pluscoul.setEnabled(false);
  //  }

    //public void afficherGrilleSurConsole(int nb){

        
        

// TODO add your handling code here:
    }//GEN-LAST:event_buttonstartActionPerformed

    private void plusessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusessActionPerformed
        if (Integer.parseInt(nbessais.getText()) == 17) {
            nbessais.setText(Integer.parseInt(nbessais.getText()) + "");
        } else {
            nbessais.setText(Integer.parseInt(nbessais.getText()) + 1 + "");
        }
// TODO add your handling code here:
    }//GEN-LAST:event_plusessActionPerformed

    private void moinsessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moinsessActionPerformed
        if (Integer.parseInt(nbessais.getText()) == 2) {
            nbessais.setText(Integer.parseInt(nbessais.getText()) + "");
        } else {
            nbessais.setText(Integer.parseInt(nbessais.getText()) - 1 + "");
        }
// TODO add your handling code here:
    }//GEN-LAST:event_moinsessActionPerformed

    private void pluscoulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pluscoulActionPerformed
        if (Integer.parseInt(nbcoul.getText()) == 12) {
            nbcoul.setText(Integer.parseInt(nbcoul.getText()) + "");
        } else {
            nbcoul.setText(Integer.parseInt(nbcoul.getText()) + 1 + "");
        }
// TODO add your handling code here:
    }//GEN-LAST:event_pluscoulActionPerformed

    private void moinscoulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moinscoulActionPerformed
        if (Integer.parseInt(nbcoul.getText()) == 2) {
            nbcoul.setText(Integer.parseInt(nbcoul.getText()) + "");
        } else {
            nbcoul.setText(Integer.parseInt(nbcoul.getText()) - 1 + "");
        }
// TODO add your handling code here:
    }//GEN-LAST:event_moinscoulActionPerformed

    private void buttonvalidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonvalidActionPerformed

        String [] tableauTest = new String [4];
        int nbcoups = Integer.parseInt(nbessais.getText());
        for (int li = 0; li < 4; li++) {
            for (int co = 0; co <= touractuel; co++) {
                if (tableauBoutons[co][li].couleurAssociee == null){
                    
                    return;
                }
            }
        }
       
        int nbplace = 0;
        int nbcouleur = 0;
        for (int ligne = 0; ligne <= 3; ligne++) {
            if (tableauBoutons[touractuel][ligne].couleurAssociee.equals(tabbase[ligne])) {
                nbplace = nbplace + 1;
                tableauTest [ligne] = "bonne place";
            } 
        }
            
        for (int position = 0; position <= 3; position++) {
            for (int ligne = 0; ligne <= 3; ligne++) {
                if (tableauBoutons[touractuel][position].couleurAssociee.equals(tabbase[ligne]) && !"bonne place".equals(tableauTest [ligne]) && !"bonne couleur".equals(tableauTest [ligne]) && !tableauBoutons[touractuel][position].couleurAssociee.equals(tabbase[position])) {
                    nbcouleur = nbcouleur + 1;
                    tableauTest [ligne] = "bonne couleur";
                    break;
                }
            }
        }
            
        String stringnbp = String.valueOf(nbplace);
        String stringnbc = String.valueOf(nbcouleur);
        for (int place = 0; place < nbcoups; place++){
            if (tableauplace[place].place == touractuel){
                tableauplace[place].setText("        " + stringnbp);
            }
            
            if (tableaucouleur[place].place == touractuel){
                tableaucouleur[place].setText("        " + stringnbc);
            }
        }
        
        if (nbplace == 4){
            nbbonnecouleur.removeAll();
            nbbonneplace.removeAll();
            labelgagnantplace = new JLabel();
            labelgagnantcouleur = new JLabel();
            nbbonneplace.add(labelgagnantplace);
            nbbonnecouleur.add(labelgagnantcouleur);
            labelgagnantplace.setText("Vous avez gagné");
            labelgagnantcouleur.setText("Vous avez gagné");
            
        }   
        touractuel = touractuel + 1;
        if (nbcoups == touractuel){
            nbbonnecouleur.removeAll();
            nbbonneplace.removeAll();
            labelgagnantplace = new JLabel();
            labelgagnantcouleur = new JLabel();
            nbbonneplace.add(labelgagnantplace);
            nbbonnecouleur.add(labelgagnantcouleur);
            Solfinale.setVisible(true);
            labelgagnantplace.setText("Vous avez perdu(vous avez utilisé tout vos coups");
            labelgagnantcouleur.setText("Vous avez perdu(vous avez utilisé tout vos coups");
            Solfinale.setVisible(true);
        }
        else{
            for (int li = 0; li<=3 ; li++){
                tableauBoutons[touractuel][li].setEnabled(true);
            }
        }
    }//GEN-LAST:event_buttonvalidActionPerformed

    /**
                         * @param args the command line arguments
                         */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mastergraphique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mastergraphique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mastergraphique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mastergraphique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mastergraphique().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GrilleJeugraph;
    private javax.swing.JPanel Panelcouleur;
    private javax.swing.JPanel Solfinale;
    private javax.swing.JLabel Textecouleur;
    private javax.swing.JLabel biencouleur;
    private javax.swing.JLabel bienplace;
    private javax.swing.JButton boutonregle;
    private javax.swing.JButton buttonstart;
    private javax.swing.JButton buttonvalid;
    private javax.swing.JLabel couleurselec;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton moinscoul;
    private javax.swing.JButton moinsess;
    private javax.swing.JPanel nbbonnecouleur;
    private javax.swing.JPanel nbbonneplace;
    private javax.swing.JLabel nbcoul;
    private javax.swing.JLabel nbessais;
    private javax.swing.JButton pluscoul;
    private javax.swing.JButton plusess;
    // End of variables declaration//GEN-END:variables
}
